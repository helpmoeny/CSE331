


//
// Name :         RevList.h
// Description :  Simple doubly linked list with reversing feature.
//

#ifndef REVLIST_H
#define REVLIST_H

//#include <iostream>

template<class T> class CRevList
{

public:
  // Constructor.  Sets to an empty list.
  CRevList() 
  {
    m_head = NULL;
    m_tail = NULL;
  }

  // Destructor.  Deletes everything in the list.
  ~CRevList()
  {
    Node *p_h = m_head;
    while(p_h != NULL){
      Node *temp = p_h;
      p_h = p_h -> m_next;
      delete temp;
    }
    m_head = NULL;
    m_tail = NULL;
  }

  // Copy constructor.  Copies another list.
  CRevList(const CRevList &b)
  {
    m_head = NULL;
    m_tail = NULL;
    Node *p_h = b -> m_head; // p_h represents pointer head in original list
    PushBack(p_h -> m_payload);
    p_h = p_h -> m_next;
    while(p_h != b.m_head){ // stops while after reaching the beginning 
      PushBack(p_h -> m_payload);
      p_h = p_h -> m_next;
    }
  }

  // Assignment operator.  Copies another list.
  void operator=(const CRevList &b){}

  // Clear the list.
  void Clear()
  {
  }


  //
  // class Node
  // The nested node class for objects in our linked list.
  //
  // YOU MAY NOT MODIFY THIS CLASS!
  class Node 
  {
  public:
    friend class CRevList;
  
    Node() {m_next = 0;  m_prev = 0;}
    Node(const T &t) {m_payload = t;  m_next = 0;  m_prev = 0;}
  
    T Data() {return m_payload;}
    const T Data() const {return m_payload;}
  
  private:
    Node    *m_next;
    Node    *m_prev;
    T       m_payload;
  };
  
  // Determines if the list is empty
  bool IsEmpty() const {
    if ((m_head == NULL) && (m_tail == NULL)){
      return true;
    }
    return false;
  }

  //methods to add data to the front or the back of the list
  void PushFront(const T &t) {
    Node *newNode = new Node(t);
    newNode -> m_payload = t;
    newNode -> m_next = m_head;
    newNode -> m_prev = m_tail;
    if(IsEmpty()){
      m_head = newNode;
      m_tail = newNode;
    }
    else{
      m_tail -> m_next = newNode;
      m_head -> m_prev = newNode;
      m_head = newNode;
    }
  }
  void PushBack(const T &t) {
    Node *newNode = new Node(t);
    newNode -> m_next = m_head;
    newNode -> m_prev = m_tail;
    if(IsEmpty()){
      m_head = newNode;
      m_tail = newNode;
    }
    else{
      m_tail -> m_next = newNode;
      m_tail = newNode;
      m_head -> m_prev = m_tail;
    }
  }
  void PopFront() {
    Node *popNode = m_head;
    if(!IsEmpty() && (m_head != m_tail)){ // Second statement incase only 1 node present
      m_head = m_head -> m_next;
      m_tail -> m_next = m_head;
      m_head -> m_prev = m_tail;
    }
    delete popNode;
  }
  void PopBack() {
    Node *popNode = m_tail;
    if(!IsEmpty() && (m_head != m_tail)){ // Second statement incase only 1 node present
      m_tail = m_tail -> m_prev;
      m_tail -> m_next = m_head;
      m_head -> m_prev = m_tail;
    }
    delete popNode;    
  }

  //Get a pointer to the first node in the list
  const Node *Begin() const { return m_head; }
  Node *Begin() { return m_head; }

  //get a pointer to the last node in the list
  const Node *End() const { return m_tail; }
  Node *End() { return m_tail; }

  //get a pointer to node next in the list
  const Node *Next(const Node *n) const { return n -> m_next; }
  Node *Next(const Node *n) { n -> m_next; }

  //Find a node with the specified key
  const Node *Find(const T &t) const { 
    Node *p_s = m_head;
    if(p_s -> m_payload == t)     // if Head node is the one to find
      return p_s;
    else{
      p_s = p_s -> m_next;
      while (p_s != m_head){
        if(p_s -> m_payload == t)
          return p_s;
        else{
          p_s = p_s -> m_next;
        }
      }
    }
    return NULL;
   }
  
  Node *Find(const T &t) {
    Node *p_s = m_head;
    if(p_s -> m_payload == t)     // if Head node is the one to find
      return p_s;
    else{
      p_s = p_s -> m_next;
      while (p_s != m_head){
        if(p_s -> m_payload == t)
          return p_s;
        else{
          p_s = p_s -> m_next;
        }
      }
    }
    return NULL;
  }

  //Delete the given node
  void Delete(Node *n){
    n -> m_prev -> m_next = n -> m_next;
    n -> m_next -> m_prev = n -> m_prev;
  }

  //Reverse the list in O(1) time
  void Reverse() {
    Node *p_s = m_head;
    Node *nextNode;
    Node *temp;
    
    nextNode = p_s -> m_next;         // Swaps m_next and m_prev for head
    temp = p_s -> m_prev;
    p_s -> m_prev = p_s -> m_next;
    p_s -> m_next = temp;
    p_s = nextNode;
    
    while(p_s != m_head){             // Swaps until head is reached
      nextNode = p_s -> m_next;
      temp = p_s -> m_prev;
      p_s -> m_prev = p_s -> m_next;
      p_s -> m_next = temp;
      p_s = nextNode;
    }

  }

  

 private:

  //NOTE: you may add any private member variables or 
  //      methods you need to complete the implementation

  Node    *m_head;             // Head node
  Node    *m_tail;             // Tail node
 };

// Assignment operator.  Copies another list.
// template<class T> void CRevList<T>::operator=(const CRevList<T> &b){
//     m_head = NULL;
//     m_tail = NULL;
//     Node *p_h = b -> m_head; // p_h represents pointer head in original list
//     PushBack(p_h -> m_payload);
//     p_h = p_h -> m_next;
//     while(p_h != b.m_head){ // stops while after reaching the beginning 
//       PushBack(p_h -> m_payload);
//       p_h = p_h -> m_next;
//     }
// }

//template<class T> (CRevList<T>::Node *) CRevList<T>::Begin1() {return m_reverse ? m_head.m_prev : m_head.m_next;}


#endif
